#!/usr/bin/env php
<?php

function exit_with_error($error) {
    print('Error: ' . $error . PHP_EOL);
    exit(1);
}

// Composer autoloader
$autoload = null;
$autoloadLocations = [
    __DIR__ . '/vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php'
];

foreach ($autoloadLocations as $file) {
    if (file_exists($file)) {
        $autoload = $file;
        break;
    }
}

if ($autoload) {
    require($autoload);
} else {
    exit_with_error('Unable to find Composer autoloader.');
}

// Directories, constants for now
define('SITES_DIR', __DIR__ . '/../sites/');
define('OUTPUT_DIR', __DIR__ . '/../output/');

if (!is_readable(SITES_DIR)) {
    exit_with_error('Sites directory ' . SITES_DIR . ' is not readable.');
}
if (!is_writable(OUTPUT_DIR)) {
    exit_with_error('Output directory ' . OUTPUT_DIR . ' is not writable.');
}

$sitename = $argv[1] ?? null;
if (!$sitename) {
    exit_with_error('Give site name as argument.');
}

// Read site to memory
$parser = new Stagger\Parser();
$site = $parser->parse($sitename);

// Initialize Markdown parser
$markdownEnv = League\CommonMark\Environment::createCommonMarkEnvironment();
$markdownEnv->addExtension(new League\CommonMark\Extension\Table\TableExtension());
$markdownPros = new Stagger\MarkdownProcessor($markdownEnv);
$markdownEnv->addEventListener(League\CommonMark\Event\DocumentParsedEvent::class, [$markdownPros, 'onDocumentParsed']);
$markdownConv = new League\CommonMark\MarkdownConverter($markdownEnv);

// Initialize Twig
$twigLoader = new Twig\Loader\ArrayLoader($site->templates);
$twigEnv = new Twig\Environment($twigLoader, [
    'autoescape' => false
]);

// Process site and write it to output directory
$generator = new Stagger\Generator($markdownConv, $twigEnv);
$generator->generate($site);

print("Generated site $sitename in " . OUTPUT_DIR . "$sitename." . PHP_EOL);
