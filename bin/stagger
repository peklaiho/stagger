#!/usr/bin/env php
<?php

function show_info($txt) {
    print($txt . PHP_EOL);
}

function exit_with_error($error) {
    print('Error: ' . $error . PHP_EOL);
    exit(1);
}

// Composer autoloader
$autoload = null;
$autoloadLocations = [
    __DIR__ . '/vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php'
];

foreach ($autoloadLocations as $file) {
    if (file_exists($file)) {
        $autoload = $file;
        break;
    }
}

if ($autoload) {
    require($autoload);
} else {
    exit_with_error('Unable to find Composer autoloader.');
}

// Directories
define('SITES_DIR', __DIR__ . '/../sites/');

if (getenv('STAGGER_OUT')) {
    define('OUTPUT_DIR', getenv('STAGGER_OUT'));
} else {
    define('OUTPUT_DIR', __DIR__ . '/../output/');
}

if (!is_readable(SITES_DIR)) {
    exit_with_error('Sites directory ' . SITES_DIR . ' is not readable.');
}
if (!is_writable(OUTPUT_DIR)) {
    exit_with_error('Output directory ' . OUTPUT_DIR . ' is not writable.');
}

$sitename = $argv[1] ?? null;
if (!$sitename) {
    exit_with_error('Give site name as argument.');
}

// Clean sites from output directory
if ($sitename == '--clean') {
    show_info("Clean generated sites in output directory.");
    foreach (glob(OUTPUT_DIR . '*') as $sitedir) {
        if (is_dir($sitedir)) {
            show_info("Delete: $sitedir");
            shell_exec("rm -r $sitedir");
        }
    }
    exit(0);
}

$site = new Stagger\Site($sitename);

// Initialize Markdown parser
$markdownEnv = League\CommonMark\Environment\Environment::createCommonMarkEnvironment();
$markdownEnv->addExtension(new League\CommonMark\Extension\Table\TableExtension());
$markdownEnv->addExtension(new League\CommonMark\Extension\FrontMatter\FrontMatterExtension());
$markdownConv = new League\CommonMark\MarkdownConverter($markdownEnv);

// Parse the site
$reader = new Stagger\Reader($markdownConv);
$parser = new Stagger\Parser($reader);
$parser->parse($site);

echo PHP_EOL;

// Validate site
$validator = new Stagger\Validator();
$validator->validate($site);

echo PHP_EOL;

// Initialize Twig
$twigLoader = new Twig\Loader\ArrayLoader($site->getTwigTemplates());
$twigEnv = new Twig\Environment($twigLoader, [
    'autoescape' => false
]);

// Process site and write it to output directory
$highlighter = new Highlight\Highlighter();
$processor = new Stagger\Processor($highlighter);
$generator = new Stagger\Generator($twigEnv, $processor);
$generator->generate($site);

show_info(PHP_EOL . "Generated site in " . OUTPUT_DIR . "$sitename.");
